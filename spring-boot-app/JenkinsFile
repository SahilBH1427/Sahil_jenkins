pipeline {
    /* ------------------------------------------------------------------ *
     * 1)  Agent: Maven + Docker‑in‑Docker image provided by Abhishek      *
     * ------------------------------------------------------------------ */
    agent {
        docker {
            image 'abhishekf5/maven-abhishek-docker-agent:v1'
            args  '--user root -v /var/run/docker.sock:/var/run/docker.sock'
        }
    }

    /* ------------------------------------------------------------------ *
     * 2)  Global environment variables                                   *
     * ------------------------------------------------------------------ */
    environment {
        APP_DIR        = 'spring-boot-app'               // <- real folder that exists
        SONAR_URL      = 'http://13.233.84.218:9000'
        DOCKER_IMAGE   = "sahilf5/ultimate-cicd:${BUILD_NUMBER}"
    }

    stages {
        /* -------------- Stage 0: Checkout -------------------------------- */
        stage('Checkout') {
            steps {
                checkout scm                       // ← actually fetch the repo
                sh 'echo "Workspace top‑level:" && ls -1'
            }
        }

        /* -------------- Stage 1: Build & Unit‑tests ---------------------- */
        stage('Build and Test') {
            steps {
                dir(APP_DIR) {
                    sh 'mvn -B clean package'
                }
            }
        }

        /* -------------- Stage 2: SonarQube Analysis --------------------- */
        stage('Static Code Analysis') {
            steps {
                dir(APP_DIR) {
                    withCredentials([string(credentialsId: 'sonarqube',
                                            variable: 'SONAR_TOKEN')]) {
                        sh """
                            mvn sonar:sonar \
                                -Dsonar.login=${SONAR_TOKEN} \
                                -Dsonar.host.url=${SONAR_URL}
                        """
                    }
                }
            }
        }

        /* -------------- Stage 3: Build & Push Docker image -------------- */
        stage('Build and Push Docker Image') {
            environment {
                REGISTRY_CREDENTIALS = credentials('docker-cred')
            }
            steps {
                dir(APP_DIR) {
                    sh "docker build -t ${DOCKER_IMAGE} ."
                }
                script {
                    docker.withRegistry('https://index.docker.io/v1/', 'docker-cred') {
                        docker.image(DOCKER_IMAGE).push()
                    }
                }
            }
        }

        /* -------------- Stage 4: Bump tag in manifests repo ------------- */
        stage('Update Deployment File') {
            environment {
                GIT_REPO       = 'jenkins-manifest'
                GIT_USER       = 'SahilBH1427'
                MANIFEST_PATH  = 'spring-boot-app-manifests/deployment.yml'
            }
            steps {
                withCredentials([string(credentialsId: 'github', variable: 'GH_TOKEN')]) {
                    sh """
                        git config --global user.email "sahil.bharne1427@gmail.com"
                        git config --global user.name  "Sahil Bharne"

                        git clone https://${GH_TOKEN}@github.com/${GIT_USER}/${GIT_REPO}.git
                        cd ${GIT_REPO}

                        sed -i "s/replaceImageTag/${BUILD_NUMBER}/g" ${MANIFEST_PATH}

                        git add ${MANIFEST_PATH}
                        git commit -m "ci: update image tag to ${BUILD_NUMBER}"
                        git push origin main
                    """
                }
            }
        }
    }

    post { always { cleanWs() } }
}

